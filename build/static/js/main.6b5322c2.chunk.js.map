{"version":3,"sources":["helpers/format-date.ts","helpers/format-type.ts","components/pokemon-card.tsx","services/pokemon-service.ts","pages/pokemon-list.tsx","pages/pokemon-detail.tsx","pages/page-not-found.tsx","components/pokemon-form.tsx","pages/pokemon-edit.tsx","models/pokemon.ts","pages/pokemon-add.tsx","App.tsx","index.tsx"],"names":["formatDate","date","arguments","length","undefined","Date","concat","getDate","getMonth","getFullYear","formatType","type","color","PokemonCard","_ref","pokemon","_ref$borderColor","borderColor","_useState","useState","_useState2","_slicedToArray","setColor","history","useHistory","_jsx","className","onClick","id","push","onMouseEnter","onMouseLeave","children","_jsxs","style","src","picture","alt","name","created","types","map","PokemonService","_classCallCheck","_createClass","key","value","_this","fetch","then","response","json","catch","error","handleError","_this2","data","isEmpty","_this3","method","body","JSON","stringify","headers","_this4","_this5","Object","keys","console","log","PokemonList","pokemons","setPokemons","useEffect","getPokemons","Link","position","bottom","right","to","PokemonDetail","match","setPokemon","getPokemon","params","width","margin","hp","cp","PageNotFound","PokemonForm","isEditForm","isValid","form","setForm","hasType","includes","handleInputChange","e","fieldName","target","fieldValue","newField","_defineProperty","_objectSpread","addPokemon","updatePokemon","isAddForm","validateForm","newForm","startsWith","endsWith","test","isTypesValid","onSubmit","preventDefault","handleSubmit","deletePokemon","htmlFor","onChange","marginBottom","disabled","checked","filter","currentType","selectType","PokemonEdit","Pokemon","this","PokemonAdd","getTime","_useState3","App","Router","Switch","Route","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6b5322c2.chunk.js","sourcesContent":["const formatDate = (date: Date = new Date()): string => {\r\n    return `${date.getDate()}/${date.getMonth()+1}/${date.getFullYear()}`\r\n}\r\n\r\nexport default formatDate;\r\n","const formatType = (type: string): string => {\r\n    let color: string;\r\n   \r\n    switch (type) {\r\n      case 'Feu': \r\n        color = 'red lighten-1'; \r\n        break; \r\n      case 'Eau': \r\n        color = 'blue lighten-1'; \r\n        break; \r\n      case 'Plante': \r\n        color = 'green lighten-1'; \r\n        break; \r\n      case 'Insecte': \r\n        color = 'brown lighten-1'; \r\n        break; \r\n      case 'Normal': \r\n        color = 'grey lighten-3'; \r\n        break; \r\n      case 'Vol': \r\n        color = 'blue lighten-3'; \r\n        break; \r\n      case 'Poison': \r\n        color = 'deep-purple accent-1'; \r\n        break; \r\n      case 'Fée': \r\n        color = 'pink lighten-4'; \r\n        break; \r\n      case 'Psy': \r\n        color = 'deep-purple darken-2'; \r\n        break; \r\n      case 'Electrik': \r\n        color = 'lime accent-1'; \r\n        break; \r\n      case 'Combat': \r\n        color = 'deep-orange'; \r\n        break; \r\n      default: \r\n        color = 'grey'; \r\n        break; \r\n    }\r\n   \r\n    return `chip ${color}`;\r\n}\r\n\r\nexport default formatType;","import React, { FunctionComponent, useState } from 'react';\r\nimport Pokemon from '../models/pokemon';\r\nimport './pokemon-card.css';\r\nimport formatDate from '../helpers/format-date';\r\nimport formatType from '../helpers/format-type';\r\nimport { useHistory } from 'react-router-dom';\r\n  \r\ntype Props = {\r\n  pokemon: Pokemon\r\n  borderColor?: string\r\n};\r\n  \r\nconst PokemonCard: FunctionComponent<Props> = ({pokemon, borderColor = '#009688'}) => {\r\n  \r\n  const [color, setColor] = useState<string>();  \r\n  const history = useHistory();\r\n\r\n  const showBorder = () => {\r\n    setColor(borderColor);\r\n  }\r\n\r\n  const hideBorder = () => {\r\n    setColor('#f5f5f5'); // on remets la bordure initial : grise.\r\n  }\r\n\r\n  const goToPokemon = (id: number) => {\r\n    history.push(`/pokemons/${id}`);\r\n  }\r\n\r\n  return (\r\n    <div className=\"col s6 m4\" onClick={() => goToPokemon(pokemon.id)} onMouseEnter={showBorder} onMouseLeave={hideBorder}>\r\n      <div className=\"card horizontal\" style={{ borderColor: color }}>\r\n        <div className=\"card-image\"> \r\n          <img src={pokemon.picture} alt={pokemon.name}/>\r\n        </div>\r\n        <div className=\"card-stacked\">\r\n          <div className=\"card-content\">\r\n            <p>{pokemon.name}</p>\r\n            <p><small>{formatDate(pokemon.created)}</small></p>\r\n            {pokemon.types.map(type => (\r\n                <span key={type} className={formatType(type)}>{type}</span>\r\n\r\n            ))}            \r\n          </div>\r\n        </div>\r\n      </div> \r\n    </div>\r\n  );\r\n}\r\n  \r\nexport default PokemonCard;","import Pokemon from \"../models/pokemon\";\r\n \r\nexport default class PokemonService {\r\n \r\n  static getPokemons(): Promise<Pokemon[]> {\r\n    return fetch('http://localhost:3001/pokemons')\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n  }\r\n \r\n  static getPokemon(id: number): Promise<Pokemon|null> {\r\n    return fetch(`http://localhost:3001/pokemons/${id}`)\r\n      .then(response => response.json())\r\n      .then(data => this.isEmpty(data) ? null : data)\r\n      .catch(error => this.handleError(error));\r\n  }\r\n  \r\n  static updatePokemon(pokemon: Pokemon): Promise<Pokemon> {\r\n    return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(pokemon),\r\n      headers: { 'Content-Type': 'application/json' }\r\n    })\r\n    .then(response => response.json())\r\n    .catch(error => this.handleError(error));\r\n  }\r\n\r\n  static addPokemon(pokemon: Pokemon): Promise<Pokemon> {\r\n    delete pokemon.created;\r\n\r\n    return fetch(`http://localhost:3001/pokemons`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(pokemon),\r\n      headers: { 'Content-Type': 'application/json' }\r\n    })\r\n    .then(response => response.json())\r\n    .catch(error => this.handleError(error));\r\n  }\r\n\r\n  static deletePokemon(pokemon: Pokemon): Promise<{}> {\r\n    return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\r\n      method: 'DELETE',\r\n      headers: { 'Content-Type': 'application/json' }\r\n    })\r\n    .then(response => response.json())\r\n    .catch(error => this.handleError(error));\r\n  }\r\n\r\n  static isEmpty(data: Object): boolean {\r\n    return Object.keys(data).length === 0;\r\n  }\r\n\r\n  static handleError(error: Error): void {\r\n    console.log(error)\r\n  }\r\n}","import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport Pokemon from '../models/pokemon';\r\nimport PokemonCard from '../components/pokemon-card';\r\nimport PokemonService from '../services/pokemon-service';\r\nimport { Link } from 'react-router-dom';\r\n  \r\nconst PokemonList: FunctionComponent = () => {\r\n  const [pokemons, setPokemons] = useState<Pokemon[]>([]);\r\n  \r\n  useEffect(() => {\r\n    PokemonService.getPokemons().then(pokemons => setPokemons(pokemons));\r\n  }, []);\r\n  \r\n  return (\r\n    <div>\r\n      <h1 className=\"center\">Pokédex</h1>\r\n      <div className=\"container\"> \r\n        <div className=\"row\"> \r\n        {pokemons.map(pokemon => (\r\n          <PokemonCard key={pokemon.id} pokemon={pokemon} />\r\n        ))}\r\n        </div>\r\n        <Link className=\"btn-floating btn-large waves-effect waves-light red z-depth-3\" style={{position: 'fixed', bottom: '25px', right: '25px'}} to=\"/pokemon/add\">\r\n        <i className='material-icons'>add</i>\r\n        </Link>\r\n      </div>\r\n    </div> \r\n  );\r\n}\r\n  \r\nexport default PokemonList;","import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport { RouteComponentProps, Link } from 'react-router-dom';\r\nimport Pokemon from '../models/pokemon';\r\nimport formatDate from '../helpers/format-date';\r\nimport formatType from '../helpers/format-type';\r\nimport PokemonService from '../services/pokemon-service';\r\n  \r\ntype Params = { id: string };\r\n  \r\nconst PokemonDetail: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\r\n    \r\n  const [pokemon, setPokemon] = useState<Pokemon|null>(null);\r\n  \r\n  useEffect(() => {\r\n    // Mémo : le prefix \"+\" avant match.params.id permets de le passer d'une chaîne de caractère à un nombre, merci TypeScript !\r\n    PokemonService.getPokemon(+match.params.id).then(pokemon => setPokemon(pokemon));\r\n  }, [match.params.id]);\r\n    \r\n  return (\r\n    <div>\r\n      { pokemon ? (\r\n        <div className=\"row\">\r\n          <div className=\"col s12 m8 offset-m2\"> \r\n            <h2 className=\"header center\">{ pokemon.name }</h2>\r\n            <div className=\"card hoverable\"> \r\n              <div className=\"card-image\">\r\n                <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\r\n                <Link to={`/pokemons/edit/${pokemon.id}`} className=\"btn btn-floating halfway-fab waves-effect waves-light\">\r\n                  <i className=\"material-icons\">edit</i>\r\n                </Link>\r\n              </div>\r\n              <div className=\"card-stacked\">\r\n                <div className=\"card-content\">\r\n                  <table className=\"bordered striped\">\r\n                    <tbody>\r\n                      <tr> \r\n                        <td>Nom</td> \r\n                        <td><strong>{ pokemon.name }</strong></td> \r\n                      </tr>\r\n                      <tr> \r\n                        <td>Points de vie</td> \r\n                        <td><strong>{ pokemon.hp }</strong></td> \r\n                      </tr> \r\n                      <tr> \r\n                        <td>Dégâts</td> \r\n                        <td><strong>{ pokemon.cp }</strong></td> \r\n                      </tr> \r\n                      <tr> \r\n                        <td>Types</td> \r\n                        <td>\r\n                          {pokemon.types.map(type => (\r\n                           <span key={type} className={formatType(type)}>{type}</span>\r\n                          ))}\r\n                        </td> \r\n                      </tr> \r\n                      <tr> \r\n                        <td>Date de création</td> \r\n                        <td>{formatDate(pokemon.created)}</td> \r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n                <div className=\"card-action\">\r\n                  <Link to=\"/\">Retour</Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <h4 className=\"center\">Aucun pokémon à afficher !</h4>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n  \r\nexport default PokemonDetail;","import React, { FunctionComponent } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n  \r\nconst PageNotFound: FunctionComponent = () => {\r\n  \r\n  return (\r\n    <div className=\"center\">\r\n      <img src=\"http://assets.pokemon.com/assets/cms2/img/pokedex/full/035.png\" alt=\"Page non trouvée\"/>\r\n      <h1>Hey, cette page n'existe pas !</h1> \r\n      <Link to=\"/\" className=\"waves-effect waves-teal btn-flat\">\r\n        Retourner à l'accueil\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n  \r\nexport default PageNotFound;","import React, { FunctionComponent, useState } from 'react';\r\nimport Pokemon from '../models/pokemon';\r\nimport formatType from '../helpers/format-type';\r\nimport { useHistory } from 'react-router-dom';\r\nimport PokemonService from '../services/pokemon-service';\r\n\r\n  \r\ntype Props = {\r\n  pokemon: Pokemon,\r\n  isEditForm: boolean\r\n};\r\n\r\ntype Field = {\r\n  value?: any,\r\n  error?: string,\r\n  isValid?: boolean\r\n}\r\n\r\ntype Form = {\r\n  picture: Field,\r\n  name: Field,\r\n  hp: Field,\r\n  cp: Field,\r\n  types: Field\r\n  \r\n}\r\n\r\nconst PokemonForm: FunctionComponent<Props> = ({pokemon, isEditForm}) => {\r\n\r\n  const [form, setForm] = useState<Form>({\r\n    picture: { value: pokemon.picture },\r\n    name: { value: pokemon.name, isValid: true },\r\n    hp: { value: pokemon.hp, isValid: true },\r\n    cp: { value: pokemon.cp, isValid: true },\r\n    types: { value: pokemon.types, isValid: true }\r\n  })\r\n\r\n  const history = useHistory();\r\n\r\n  const types: string[] = [\r\n    'Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik',\r\n    'Poison', 'Fée', 'Vol', 'Combat', 'Psy'\r\n  ];\r\n  \r\n  const hasType = (type: string): boolean => {\r\n    return form.types.value.includes(type);\r\n  }\r\n\r\n  const selectType = (type: string, e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    const checked = e.target.checked;\r\n    let newField: Field;\r\n\r\n    if(checked) {\r\n      //Si l'utilisateur coche un type, on le rajoute à la liste des types du pokemon\r\n      const newTypes: string[] = form.types.value.concat([type]);\r\n      newField = { value: newTypes };\r\n    } else {\r\n      //Si l'utilisateur décoche un type, on le retire de la liste des types du pokemon\r\n      const newTypes: string[] = form.types.value.filter((currentType: string) => currentType !== type);\r\n      newField = { value: newTypes };\r\n    }\r\n\r\n    setForm({...form, ...{ types: newField }});\r\n  }\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const fieldName: string = e.target.name;\r\n    const fieldValue: string = e.target.value;\r\n    const newField: Field = {[fieldName]: { value: fieldValue }}\r\n\r\n    setForm({...form, ...newField});\r\n  }\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    const isFormValid = validateForm();\r\n    if(isFormValid) {\r\n      pokemon.picture = form.picture.value;\r\n      pokemon.name = form.name.value;\r\n      pokemon.hp = form.hp.value;\r\n      pokemon.cp = form.cp.value;\r\n      pokemon.types = form.types.value;\r\n\r\n      isEditForm ? updatePokemon() : addPokemon();\r\n\r\n    }\r\n    \r\n  }\r\n\r\n  const addPokemon = () => {\r\n    PokemonService.addPokemon(pokemon).then(() => history.push('/pokemons'));\r\n  }\r\n\r\n  const updatePokemon = () => {\r\n    PokemonService.updatePokemon(pokemon).then(() => history.push(`/pokemons/${pokemon.id}`));      \r\n  }\r\n\r\n  const isAddForm = () => {\r\n    return !isEditForm;\r\n  }\r\n\r\n  const validateForm = () => {\r\n    let newForm: Form = form;\r\n\r\n    //Validator url\r\n    if(isAddForm()) {\r\n      const start = \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/\";\r\n      const end = \".png\"\r\n\r\n      if(!form.picture.value.startsWith(start) || !form.picture.value.endsWith(end)) {\r\n        const errorMsg: string = \"L'url est incorrect\";\r\n        const newField: Field = { value: form.picture.value, error: errorMsg, isValid: false };\r\n        newForm = { ...form, ...{ picture: newField} }\r\n      } else {\r\n        const newField: Field = { value: form.picture.value, error: '', isValid: true};\r\n        newForm = { ...form, ...{ picture: newField} }\r\n      }\r\n    }\r\n\r\n    //Validator name\r\n    if (!/^[a-zA-Zàèé ]{3,25}$/.test(form.name.value)) {\r\n      const errorMsg: string = \"Le nom du pokémon est requis (lettres uniquement).\";\r\n      const newField: Field = { value: form.name.value, error: errorMsg, isValid: false };\r\n      newForm = { ...newForm, ...{ name: newField } };\r\n    } else {\r\n      const newField: Field = { value: form.name.value, error: '', isValid: true };\r\n      newForm = { ...newForm, ...{ name: newField } };\r\n    }\r\n\r\n    //Validator hp\r\n    if (!/^[0-9]{1,3}$/.test(form.hp.value)) {\r\n      const errorMsg: string = \"Les points de vie du pokémon doivent être compris entre 0 et 999.\";\r\n      const newField: Field = { value: form.hp.value, error: errorMsg, isValid: false };\r\n      newForm = { ...newForm, ...{ hp: newField } };\r\n      } else {\r\n        const newField: Field = { value: form.hp.value, error: '', isValid: true };\r\n        newForm = { ...newForm, ...{ hp: newField } };\r\n      }\r\n\r\n      //Validator cp\r\n      if (!/^[0-9]{1,2}$/.test(form.cp.value)) {\r\n        const errorMsg: string = \"Le dégats du pokémon doivent être compris entre 0 et 99.\";\r\n        const newField: Field = { value: form.cp.value, error: errorMsg, isValid: false };\r\n        newForm = { ...newForm, ...{ cp: newField } };\r\n        } else {\r\n          const newField: Field = { value: form.cp.value, error: '', isValid: true };\r\n          newForm = { ...newForm, ...{ cp: newField } };\r\n        }\r\n\r\n        setForm(newForm);\r\n        return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\r\n    }\r\n\r\n  const isTypesValid = (type: string): boolean => {\r\n    //Le pokémon doit avoir au moins 1 type\r\n    if(form.types.value.length === 1 && hasType(type)) {\r\n      return false;\r\n    }\r\n    //Le pokémon peut avoir 3 types maximum\r\n    if(form.types.value.length >= 3 && !hasType(type)) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n  \r\n  const deletePokemon = () => {\r\n    PokemonService.deletePokemon(pokemon).then(() => history.push(`/pokemons`));\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={e => handleSubmit(e)}>\r\n      <div className=\"row\">\r\n        <div className=\"col s12 m8 offset-m2\">\r\n          <div className=\"card hoverable\"> \r\n            {isEditForm && (\r\n              <div className=\"card-image\">\r\n                <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\r\n                <span className=\"btn-floating halfway-fab waves-effect waves-light \">\r\n                  <i onClick={deletePokemon} className=\"material-icons\">delete</i>\r\n                </span>\r\n              </div>\r\n            )}\r\n\r\n            <div className=\"card-stacked\">\r\n              <div className=\"card-content\">\r\n                {/* Pokemon picture */}\r\n                { isAddForm() && (\r\n                  <div className=\"form-group\">\r\n                    <label htmlFor=\"name\">Image</label>\r\n                    <input id=\"picture\" name=\"picture\" type=\"text\" className=\"form-control\" value={form.picture.value} onChange={e => handleInputChange(e)}></input>\r\n                    {/* error */}\r\n                    {form.picture.error && \r\n                    <div className=\"card-panel red accent-1\">\r\n                      {form.picture.error}\r\n                    </div>\r\n                    }\r\n                  </div> \r\n                )}               \r\n                {/* Pokemon name */}\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"name\">Nom</label>\r\n                  <input id=\"name\" name=\"name\" type=\"text\" className=\"form-control\" value={form.name.value} onChange={e => handleInputChange(e)}></input>\r\n                  {/* error */}\r\n                  {form.name.error && \r\n                  <div className=\"card-panel red accent-1\">\r\n                    {form.name.error}\r\n                  </div>\r\n                  }\r\n                </div>\r\n                {/* Pokemon hp */}\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"hp\">Point de vie</label>\r\n                  <input id=\"hp\" name=\"hp\" type=\"number\" className=\"form-control\" value={form.hp.value} onChange={e => handleInputChange(e)}></input>\r\n                  {form.hp.error && \r\n                  <div className=\"card-panel red accent-1\">\r\n                    {form.hp.error}\r\n                  </div>\r\n                  }\r\n                </div>\r\n                {/* Pokemon cp */}\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"cp\">Dégâts</label>\r\n                  <input id=\"cp\" name=\"cp\" type=\"number\" className=\"form-control\" value={form.cp.value} onChange={e => handleInputChange(e)}></input>\r\n                  {form.cp.error && \r\n                  <div className=\"card-panel red accent-1\">\r\n                    {form.cp.error}\r\n                  </div>\r\n                  }\r\n                </div>\r\n                {/* Pokemon types */}\r\n                <div className=\"form-group\">\r\n                  <label>Types</label>\r\n                  {types.map(type => (\r\n                    <div key={type} style={{marginBottom: '10px'}}>\r\n                      <label>\r\n                        <input id={type} name={type} type=\"checkbox\" className=\"filled-in\" value={type} disabled={!isTypesValid(type)} checked={hasType(type)} onChange={e => selectType(type, e)}></input>\r\n                        <span>\r\n                          <p className={formatType(type)}>{ type }</p>\r\n                        </span>\r\n                      </label>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n              <div className=\"card-action center\">\r\n                {/* Submit button */}\r\n                <button type=\"submit\" className=\"btn\">Valider</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n   \r\nexport default PokemonForm;","import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport PokemonForm from '../components/pokemon-form';\r\nimport Pokemon from '../models/pokemon';\r\nimport PokemonService from '../services/pokemon-service';\r\n \r\ntype Params = { id: string };\r\n\r\n  \r\nconst PokemonEdit: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\r\n    \r\n  const [pokemon, setPokemon] = useState<Pokemon|null>(null);\r\n  \r\n  useEffect(() => {\r\n    PokemonService.getPokemon(+match.params.id).then(pokemon => setPokemon(pokemon));\r\n  }, [match.params.id]);\r\n    \r\n  return (\r\n    <div>\r\n      { pokemon ? (\r\n        <div className=\"row\">\r\n            <h2 className=\"header center\">Éditer { pokemon.name }</h2>\r\n            <PokemonForm pokemon={pokemon} isEditForm={true}></PokemonForm>\r\n        </div>\r\n      ) : (\r\n        <h4 className=\"center\">Aucun pokémon à afficher !</h4>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n  \r\nexport default PokemonEdit;","export default class Pokemon {\r\n\r\n    // 1. Définition des valeurs par défaut des propriétés d'un pokémon.\r\n    constructor(\r\n        public id: number,\r\n        public hp: number = 100,\r\n        public cp: number = 10,\r\n        public name: string = '...',\r\n        public picture: string = 'https://assets.pokemon.com/assets/cms2/img/pokedex/detail/XXX.png',\r\n        public types: Array<string> = ['Normal'],\r\n        public created: Date = new Date()\r\n    ) {\r\n     // 2. Initialisation des propiétés d'un pokémons.\r\n     this.id = id;\r\n     this.hp = hp;\r\n     this.cp = cp;\r\n     this.name = name;\r\n     this.picture = picture;\r\n     this.types = types;\r\n     this.created = created;\r\n    }\r\n   }","import React, { FunctionComponent, useState } from 'react';\r\nimport PokemonForm from '../components/pokemon-form';\r\nimport Pokemon from '../models/pokemon';\r\n   \r\nconst PokemonAdd: FunctionComponent = () => {    \r\n  const [id] = useState<number>(new Date().getTime());\r\n  const [pokemon] = useState<Pokemon>(new Pokemon(id));\r\n  \r\n  return ( \r\n    <div className=\"row\">\r\n      <h2 className=\"header center\">Ajouter un Pokémon</h2>\r\n      <PokemonForm pokemon={pokemon} isEditForm={false}></PokemonForm>\r\n    </div>\r\n  )\r\n}\r\n  \r\nexport default PokemonAdd;","import React, { FunctionComponent } from 'react';\r\nimport PokemonList from './pages/pokemon-list';\r\nimport PokemonDetail from './pages/pokemon-detail';\r\nimport { BrowserRouter as Router, Link, Route, Switch } from 'react-router-dom';\r\nimport PageNotFound from './pages/page-not-found';\r\nimport PokemonEdit from './pages/pokemon-edit';\r\nimport PokemonAdd from './pages/pokemon-add';\r\n  \r\nconst App: FunctionComponent = () => {\r\n    return (\r\n        <Router>\r\n            <div>\r\n                {/* La barre de navigation commune à toutes les pages */}\r\n                <nav>\r\n                    <div className=\"nav-wrapper teal\">\r\n                        <Link to=\"/\" className=\"brand-logo center\">Pokédex</Link>\r\n                    </div>                    \r\n                </nav>\r\n                {/* Le système de gestion des routes de notre application */}\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={PokemonList} />\r\n                    <Route exact path=\"/pokemons\" component={PokemonList} />\r\n                    <Route exact path=\"/pokemon/add\" component={PokemonAdd} />\r\n                    <Route exact path=\"/pokemons/edit/:id\" component={PokemonEdit} />\r\n                    <Route path=\"/pokemons/:id\" component={PokemonDetail} />\r\n                    <Route component={PageNotFound} />\r\n                </Switch>\r\n            </div>\r\n        </Router> \r\n )\r\n}\r\n  \r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}